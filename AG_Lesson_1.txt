package com.mygdx.game;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class MyGdxGame extends ApplicationAdapter {
    SpriteBatch batch;
    Background background;
    Hero hero;
    Asteroid asteroid;

    // Разобраться с кодом
    // Не давать кораблю вылетать за лвую и правую сторону экрана
    // Верхнюю и нижнюю сторону экрана корабль должен пролетать насквозь
    // * Добавить астероид, который летает по экрану по типу звезд
    // и проверять столкновение этого астероида с кораблем, при столкновении
    // "пересоздавать" астероид

    // Варианты игры: Гонки, Герои 3, Марио, RTS, tower defence, косм. стрелялка вид (сбоку/сверху)
    // worms, battle toads

    @Override
    public void create() {
        batch = new SpriteBatch();
        background = new Background();
        hero = new Hero();
        asteroid = new Asteroid();
    }

    @Override
    public void render() {
        float dt = Gdx.graphics.getDeltaTime();
        update(dt);
        Gdx.gl.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        batch.begin();
        background.render(batch);
        hero.render(batch);
        asteroid.render(batch);
        batch.end();
    }

    public void update(float dt) {
        background.update(dt);
        hero.update(dt);
        asteroid.update(dt, hero.getPosition());
    }

    @Override
    public void dispose() {
        batch.dispose();
    }
}


package com.mygdx.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;

public class Hero {
    private Texture texture;
    private Vector2 position;
    private float speed;

    public Hero() {
        texture = new Texture("ship64.png");
        position = new Vector2(640.0f, 360.0f);
        speed = 300.0f;
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, position.x - 32.0f, position.y - 32.0f);
    }

    public void update(float dt) {
        if (Gdx.input.isKeyPressed(Input.Keys.RIGHT)) {
            if (position.x > 1280-32) {
                position.x = position.x;
            } else{
                position.x += speed * dt;
            }
        }
        if (Gdx.input.isKeyPressed(Input.Keys.LEFT)) {
            if (position.x < 32){
                position.x = position.x;
            } else {
                position.x -= speed * dt;
            }
        }
        if (Gdx.input.isKeyPressed(Input.Keys.UP)) {
            position.y += speed * dt;
            if (position.y > 720){
                position.y = 0;
            }
        }
        if (Gdx.input.isKeyPressed(Input.Keys.DOWN)) {
            position.y -= speed * dt;
            if (position.y < 0){
                position.y = 720;
            }
        }
        if (Gdx.input.isTouched()) {
            if (Gdx.input.getX() > position.x) {
                position.x += speed * dt;
            }
            if (Gdx.input.getX() < position.x) {
                position.x -= speed * dt;
            }
            if (720.0f - Gdx.input.getY() > position.y) {
                position.y += speed * dt;
            }
            if (720.0f - Gdx.input.getY() < position.y) {
                position.y -= speed * dt;
            }
        }
    }
    public Vector2 getPosition (){
        return position;
    }
}


package com.mygdx.game;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Vector2;

public class Asteroid {
    private Texture texture;
    private Vector2 position;
    private float speed;

    public Asteroid() {
        this.texture = new Texture("asteroids64.png");
        this.position = new Vector2(1280.0f+32.0f, MathUtils.random(32.0f, 720.0f-32.0f));
        this.speed = MathUtils.random(150.0f, 400.0f);
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, position.x-32, position.y-32, 32, 32, 64, 64, 1.0f, 1.0f,0, 128, 0, 64, 64, false, false);
    }

    public void update(float dt, Vector2 heroPosition) {
        position.x -= speed * dt;
        if (isCollision(position, heroPosition) || position.x < -32){
            position.set(1280.0f+32.0f, MathUtils.random(32.0f, 720.0f-32.0f));
            speed = MathUtils.random(150.0f, 400.0f);
        }
    }

    public boolean isCollision(Vector2 asteroidPosition, Vector2 heroPosition){
        if ((Math.abs(asteroidPosition.x - heroPosition.x) <= 64) && (asteroidPosition.y <= heroPosition.y + 32) && (asteroidPosition.y >= heroPosition.y -32)){
            return true;
        }
        if ((Math.abs(asteroidPosition.y - heroPosition.y) <= 64)&& (asteroidPosition.x <= heroPosition.x + 32) && (asteroidPosition.x >= heroPosition.x -32)){
            return true;
        }
        return false;
    }
}
